<?php/*  Copyright 2012 Tesliuk Igor  (email : tigor@tigor.org.ua)    This program is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License, version 2, as     published by the Free Software Foundation.    This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.    You should have received a copy of the GNU General Public License    along with this program; if not, write to the Free Software    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA*/class WMauth{private $token;private $error;private $secret;private $create_time;private $life_time;private $app_id;public function WMauth($app_id,$secret)	{	$this->app_id = $app_id;	$this->secret = $secret;	$this->token = '';	$this->create_time = 0;	$this->life_time = -1;	}	public function get_token() {	return $this->token;	}		public function set_error($error) {	$this->error = $error;	return true;	}	public function bycode($code) {	$this->error = '';	$post = 'grant_type=authorization_code&code='.$code.'&client_id='.$this->app_id.'&client_secret='.$this->secret;	$url = 'https://oauth.yandex.ru/token';	$header = array(		'POST /token HTTP/1.1',		'Host: oauth.yandex.ru',		'Content-type: application/x-www-form-urlencoded',		'Content-Length: '.strlen($post)	);	$defaults = array(        CURLOPT_POST => 1,		CURLOPT_HEADER => 0,        CURLOPT_URL => $url,		CURLOPT_CONNECTTIMEOUT => 1,        CURLOPT_FRESH_CONNECT => 1,        CURLOPT_RETURNTRANSFER => 1,        CURLOPT_FORBID_REUSE => 1,        CURLOPT_TIMEOUT => 4,		CURLOPT_SSL_VERIFYPEER => false,        CURLOPT_POSTFIELDS => $post,		CURLOPT_HTTPHEADER => $header	);			    $ch = curl_init();    curl_setopt_array($ch, $defaults);	    if( ! $json = curl_exec($ch))    {      $this->error = 'curl'.curl_errno($ch);	  return false;    }	$http_code = (string)curl_getinfo($ch, CURLINFO_HTTP_CODE);	if (($http_code != '200')AND($http_code != '400'))		{		$this->error = 'http'.$http_code;		return false;		}    curl_close($ch);				$result = array(		access_token => '',		expires_in => '',		error => ''		);		$result = json_decode($json, true);			if ($result['error'] == '')		{				$this->token = $result['access_token'];		if ($result['expires_in'] != '')			{			$this->life_time = (int)$result['expires_in'];			} else {			$this->life_time = 'inf';			}		$this->create_time = (int)time();		return true;		}	else		{		$this->error = $result['error'];		return false;		}		}	public function authorize_token($name,$pass)	{		$post = 'grant_type=password&client_id='.$this->app_id.'&client_secret='.$this->secret.'&username='.$name.'&password='.$pass;	$url = 'https://oauth.yandex.ru/token';	$header = array('POST /token HTTP/1.1','Host: oauth.yandex.ru','Content-type: application/x-www-form-urlencoded','Content-Length: '.strlen($post));	$defaults = array(        CURLOPT_POST => 1,		CURLOPT_HEADER => 0,		CURLOPT_REFERER => 'http://tigor.org.ua',        CURLOPT_URL => $url,		CURLOPT_CONNECTTIMEOUT => 1,        CURLOPT_FRESH_CONNECT => 1,        CURLOPT_RETURNTRANSFER => 1,        CURLOPT_FORBID_REUSE => 1,        CURLOPT_TIMEOUT => 4,		CURLOPT_SSL_VERIFYPEER => false,        CURLOPT_POSTFIELDS => $post,		CURLOPT_HTTPHEADER => $header		);			    $ch = curl_init();    curl_setopt_array($ch, $defaults);	    if( ! $json = curl_exec($ch))    {      $this->error = 'curl'.curl_errno($ch);	  return false;    }	$http_code = (string)curl_getinfo($ch, CURLINFO_HTTP_CODE);	if (($http_code != '200')AND($http_code != '400'))		{		$this->error = 'http'.$http_code;		return false;		}    curl_close($ch);				$result = array(		access_token => '',		expires_in => '',		error => ''		);		$result = json_decode($json, true);		if ($result['error'] == '')		{				$this->token = $result['access_token'];		if ($result['expires_in'] != '')			{			$this->life_time = (int)$result['expires_in'];			} else {			$this->life_time = 'inf';			}		$this->create_time = (int)time();		return true;		}	else		{		$this->error = $result['error'];		return false;		}		}		public function check_token()	{			if (($this->expires_in()>0)and($this->token != '') and ($this->error == '')) {			return true;		} else {			$this->error = 'expired_token';			return false;		}		}	public function name_error() 	{	switch ($this->error){		case 'expired_token':			return 'Token has expired';			break;		case 'get_uid_failed':			return 'This account does not have UID';			break;		case 'invalid_grant':			return 'Invalid Grant';			break;		case 'token_outdated':			return 'This token is expired, get new';			break;		case 'invalid_request':			return 'Something is wrong with plugin. Report to developer.';			break;		case 'http404':			return 'Error in request url';			break;		case 'invalid_client_credentials':			return 'Wrong client(application) ID';			break;		case 'unsupported_grant_type':			return 'Wrong grant_type';			break;		default:			return 'Unknown ERROR:'.$this->error;					}		}	public function clear()	{	$this->token = '';	$this->error = '';	$this->counter_id = '';	$this->create_time = 0;	$this->life_time = -1;	}	public function expires_in()	{		return ($this->create_time + $this->life_time - time());	}	}?>